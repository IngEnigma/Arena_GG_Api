generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum tournament_mode {
  Solo
  Team
}

enum tournament_status {
  Open
  Progress
  Closed
}

enum bracket_type {
  Single_Elimination
  Double_Elimination
  Free_For_All
  Round_Robin
  Swiss
  Leaderboard
}

enum game_name {
  League_of_Legends
  Rocket_League
  Counter_Strike
  Valorant
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  username     String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  deletedAt    DateTime?

  rankings               Ranking[]
  tournamentParticipants TournamentParticipant[]
  teamMembers            TeamMember[]
  admin                  Admin?
}

model Ranking {
  id            Int       @id @default(autoincrement())
  userId        Int
  gameName      game_name
  matchesPlayed Int       @default(0)
  wins          Int       @default(0)
  points        Int       @default(0)
  rankPosition  Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameName])
}

model Tournament {
  id           Int               @id @default(autoincrement())
  gameName     game_name
  name         String
  startDate    DateTime
  maxSlots     Int
  mode         tournament_mode
  rules        String?
  requirements String?
  prizes       String?
  bracketType  bracket_type
  status       tournament_status
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now())
  deletedAt    DateTime?

  participants TournamentParticipant[]
  teams        TournamentTeam[]
}

model TournamentParticipant {
  id           Int @id @default(autoincrement())
  tournamentId Int
  userId       Int

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId])
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  members TeamMember[]
  entries TournamentTeam[]
}

model TeamMember {
  id     Int @id @default(autoincrement())
  teamId Int
  userId Int

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model TournamentTeam {
  id           Int @id @default(autoincrement())
  tournamentId Int
  teamId       Int

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  team       Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, teamId])
}

model Admin {
  id     Int @id @default(autoincrement())
  userId Int @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
